// src/components/Animations/ModelAnimations.jsx
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

/**
 * Configure et applique l'animation d'entrée du modèle.
 * @param {Object} modelRef - Référence au modèle 3D.
 * @param {Object} cameraRef - Référence à la caméra.
 */
export const setupInitialAnimation = (modelRef, cameraRef) => {
  if (!modelRef?.current || !cameraRef?.current) {
    console.warn("Références au modèle ou à la caméra manquantes pour l'animation d'entrée.");
    return;
  }

  gsap.fromTo(
    modelRef.current.position,
    { y: -5, z: 10 },
    { y: 0, z: 0, duration: 1.5, ease: "power3.out" }
  );

  gsap.fromTo(
    cameraRef.current.position,
    { z: 15 },
    { z: 5, duration: 1.5, ease: "power3.out" }
  );
};

export const transitionToDetailView = (modelRef, cameraRef) => {
  if (!modelRef?.current || !cameraRef?.current) return;

  gsap.timeline()
  .to(modelRef.current.position, { x: -0.50, y: 0, z: 0, duration: 1 })
  .to(modelRef.current.rotation, { y: Math.PI *2, duration: 1 }, "<");
  
  cameraRef.current.updateProjectionMatrix();
};


/**
 * Ajoute une animation de rotation au modèle.
 *
 * @param {Object} modelRef - Référence au modèle 3D.
 * @param {number} accumulatedRotation - Rotation accumulée en radians.
 * @param {number} rotateBottle - Rotation accumulée en radians.
 */
gsap.registerPlugin(ScrollTrigger);

export const rotateBottle = (rotationGroupRef, rotationIncrement) => { // 90 degrés par défaut
  if (rotationGroupRef.current) {
    console.log(`Rotation avant : ${rotationGroupRef.current.rotation.y}`);
    gsap.to(rotationGroupRef.current.rotation, {
      y: `+=${rotationIncrement}`, // Applique une rotation relative
      duration: 1,
      ease: "power4.inOut",
      onUpdate: () => {
        console.log(`Rotation en cours : ${rotationGroupRef.current.rotation.y}`);
      },
      onComplete: () => {
        console.log(`Rotation terminée : ${rotationGroupRef.current.rotation.y}`);
      },
    });
  }
};


/**
 * Configure les animations liées au scroll pour différentes zones.
 *
 * @param {Object} modelRef - Référence au modèle 3D.
 * @param {Object} cameraRef - Référence à la caméra.
 * @param {Object} bottlePosition - Position sauvegardée du modèle.
 * @param {boolean} isMobile - Indique si l'appareil est mobile.
 */ 
export const setupModelAnimations = (modelRef, cameraRef, bottlePosition, isMobile) => {
  if (!modelRef?.current || !cameraRef?.current) {
    console.warn("Références au modèle ou à la caméra manquantes.");
    return;
  }

  // ** Animation pour la Zone 1 **
  const desktopTimeline1 = gsap.timeline({
    scrollTrigger: {
      start: "top top",
      end: "bottom top",
      scrub: true,
    },
  });

  desktopTimeline1
    .to(modelRef.current.rotation, { z: 0.2 }, 0)
    .to(modelRef.current.rotation, { y: 1 }, 0)
    .to(cameraRef.current.position, { z: 3.8 }, 0)
    .to(modelRef.current.position, { x: -0.3 }, 0);


  // ** Animation pour la Zone 2 **
  const desktopTimeline2 = gsap.timeline({
    scrollTrigger: {
      trigger: ".zone-1",
      start: "top top",
      end: "bottom top",
      scrub: true,
    },
  });

  desktopTimeline2
    .to(modelRef.current.rotation, { y: -0.7 }, 0)
    .to(modelRef.current.rotation, { z: -0.5 }, 0)
    .to(modelRef.current.position, { x: 1 }, 0)

  // ** Animation pour la Zone 3 **
  const desktopTimeline3 = gsap.timeline({
    scrollTrigger: {
      trigger: ".zone-2",
      start: "top top",
      end: "bottom top",
      scrub: true,
    },
  });

  desktopTimeline3
    .to(modelRef.current.rotation, { y: bottlePosition?.rotation?.y || 0 }, 0)
    .to(cameraRef.current.position, { z: 5.8 }, 0)
    .to(modelRef.current.position, { y: bottlePosition?.y || 0.2 }, 0)
    .to(modelRef.current.rotation, { z: bottlePosition?.rotation?.z || -0.3 }, 0)
    .to(modelRef.current.position, { x: bottlePosition?.x || 1 }, 0);

  // ** Animation pour la Zone 4 **
  const desktopTimeline4 = gsap.timeline({
    scrollTrigger: {
      trigger: ".zone-3",
      start: "top top",
      end: "bottom top",
      scrub: true,
    },
  });

  desktopTimeline4
    .to(modelRef.current.rotation, { y: 0 }, 0)
    .to(cameraRef.current.position, { z: 5.4 }, 0)
    .to(modelRef.current.position, { y: 0.2 }, 0)
    .to(modelRef.current.rotation, { z: 0 }, 0)
    .to(modelRef.current.position, { x: 0 }, 0);

  // ** Animation pour la Zone 5 **
  const desktopTimeline5 = gsap.timeline({
    scrollTrigger: {
      trigger: ".zone-4",
      start: "top top",
      end: "bottom top",
      scrub: true,
    },
  });

  desktopTimeline5
    .to(modelRef.current.rotation, { y: Math.PI / 4 }, 0)
    .to(cameraRef.current.position, { z: 4 }, 0)
    .to(modelRef.current.position, { y: 0, x: -0.5 }, 0);

  // Met à jour la matrice de projection de la caméra
  cameraRef.current.updateProjectionMatrix();

  // Rafraîchit les triggers
  ScrollTrigger.refresh();
};

