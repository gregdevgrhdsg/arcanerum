import React, { useEffect, useRef } from "react";
import { Canvas } from "@react-three/fiber";
import { useModel } from "../Context/ModelContext";
import { RumA, Flamboyance, RumB, RumC } from './GenericBottle';
import { setupModelAnimations, transitionToDetailView } from "../Animations/ModelAnimations";

const CanvasContainer = () => {
  const {
    modelRef,
    cameraRef,
    currentPosition,
    currentRotation,
    currentScale,
    cameraPosition,
    isModelLoaded,
    setIsModelLoaded,
    isDetailView,
    selectedBottle,
  } = useModel();

  const rotationGroupRef = useRef();

  const handleModelLoad = () => {
    console.log("Modèle chargé.");
    setIsModelLoaded(true);
    if (onModelReady) onModelReady();
  };
  setupModelAnimations(rotationGroupRef, cameraRef, bottlePosition, isMobile);
  
  useEffect(() => {
    if (isModelLoaded) {
      setupModelAnimations(modelRef, cameraRef);
    }
  }, [isModelLoaded]);
  
  useEffect(() => {
    if (modelRef.current) {
      modelRef.current.position.set(currentPosition.x, currentPosition.y, currentPosition.z);
      modelRef.current.rotation.set(currentRotation.x, currentRotation.y, currentRotation.z);
      modelRef.current.scale.set(currentScale.x, currentScale.y, currentScale.z);
    }
    if (cameraRef.current) {
      cameraRef.current.position.set(cameraPosition.x, cameraPosition.y, cameraPosition.z);
    }
  }, [currentPosition, currentRotation, currentScale, cameraPosition]);

  useEffect(() => {
    if (isDetailView && modelRef.current && cameraRef.current) {
      transitionToDetailView(modelRef, cameraRef, currentPosition, currentRotation, cameraPosition);
    }
  }, [isDetailView]);

  useEffect(() => {
    if (isModelLoaded) {
      setupModelAnimations(modelRef, cameraRef);
    }
  }, [isModelLoaded]);

  useEffect(() => {
    if (selectedBottle !== currentBottle) {
      console.log(`Changement de bouteille détecté: ${selectedBottle}`);
      // Appliquer une rotation relative
      setCurrentBottle(selectedBottle);
      rotateBottle(rotationGroupRef); // Par exemple, 90 degrés
    }
  }, [selectedBottle, currentBottle, rotateBottle, ]);


  const renderModel = () => {
    const Component = bottleComponents[selectedBottle];
    if (!Component) {
      console.warn(`Aucun composant trouvé pour la bouteille ID : ${currentBottle}`);
      return null;
    }

    return (
      <Component
        ref={modelRef}
        position={[currentPosition.x, currentPosition.y, currentPosition.z]}
        scale={[currentScale.x, currentScale.y, currentScale.z]}
        rotation={[currentRotation.x, currentRotation.y, currentRotation.z]}
        onLoad={handleModelLoad}
      />
    );
  };

  return (
    <div className="relative h-full">
      {!isModelLoaded && (
        <div className="absolute inset-0 flex items-center justify-center text-white">
          Chargement...
        </div>
      )}
      <Canvas
        className="sticky inset-0 top-0 h-screen"
        camera={{ position: [0, 0, 5], fov: 25 }}
        onCreated={({ camera }) => {
          cameraRef.current = camera;
          console.log("Caméra assignée :", cameraRef.current);
        }}
        style={{ width: '100%', height: '100%' }}
      >
        <ambientLight intensity={2} />
        <directionalLight position={[5, 8, 5]} intensity={3} />
        <group
          ref={rotationGroupRef} // Appliquer la rotation à ce groupe
          onUpdate={() => {
            if (!isModelLoaded) {
              handleModelLoad();
            }
          }}
        >
          <group ref={modelRef}>
            {renderModel()}
          </group>
        </group>
      </Canvas>
    </div>
  );
};

export default CanvasContainer;